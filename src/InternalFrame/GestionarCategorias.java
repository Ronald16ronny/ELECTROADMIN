
package InternalFrame;

import Controlador.Ctr_Categoria;
import Modelo.Categoria;
import java.sql.PreparedStatement;
import java.awt.Dimension;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.sql.Connection;
import java.sql.Statement;
import java.sql.SQLException;
import java.sql.ResultSet;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;
import java.util.ArrayList;
import java.util.List;


public class GestionarCategorias extends javax.swing.JInternalFrame {

    private int idCategoria;
    
    
    
    public GestionarCategorias() {
        initComponents();
        this.setSize(new Dimension(600, 400));
        this.CargarTablaCategoria();
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tlCategoria = new javax.swing.JTable();
        btnActualizar = new javax.swing.JButton();
        btnEliminar = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        txtdescripcion = new javax.swing.JTextField();
        ldlwalpaper = new javax.swing.JLabel();

        setClosable(true);
        setIconifiable(true);
        setResizable(true);
        setTitle("Gestionar Categoria");
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setFont(new java.awt.Font("Arial Narrow", 1, 36)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Arministrar Categorias");
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 10, -1, -1));

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setOpaque(false);
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        tlCategoria.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(tlCategoria);

        jPanel1.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, 330, 230));

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 60, 350, 250));

        btnActualizar.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btnActualizar.setText("Actualizar");
        btnActualizar.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnActualizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnActualizarActionPerformed(evt);
            }
        });
        getContentPane().add(btnActualizar, new org.netbeans.lib.awtextra.AbsoluteConstraints(440, 60, 100, -1));

        btnEliminar.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        btnEliminar.setText("Eliminar");
        btnEliminar.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnEliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEliminarActionPerformed(evt);
            }
        });
        getContentPane().add(btnEliminar, new org.netbeans.lib.awtextra.AbsoluteConstraints(440, 100, 100, -1));

        jLabel2.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(0, 0, 0));
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel2.setText("Descripcion:");
        getContentPane().add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 180, -1, -1));

        txtdescripcion.setBackground(new java.awt.Color(255, 255, 255));
        txtdescripcion.setFont(new java.awt.Font("Bahnschrift", 0, 14)); // NOI18N
        txtdescripcion.setForeground(new java.awt.Color(0, 0, 0));
        txtdescripcion.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        txtdescripcion.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        getContentPane().add(txtdescripcion, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 210, 170, 30));

        ldlwalpaper.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/fondo-azul-para-textura.jpg"))); // NOI18N
        getContentPane().add(ldlwalpaper, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 590, 370));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnActualizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnActualizarActionPerformed
       
        if (!txtdescripcion.getText().isEmpty()){
            Categoria categoria = new Categoria();
            Ctr_Categoria controlcategoria = new Ctr_Categoria();
            
            categoria.setDescripcion(txtdescripcion.getText().trim());
            if(controlcategoria.actualizar(categoria, idCategoria)){
                JOptionPane.showMessageDialog(null, "Categoria Actualizada");
                txtdescripcion.setText("");
                this.CargarTablaCategoria();
            }else{
                JOptionPane.showMessageDialog(null, "Error al Actualizar Categoria");
            }
            
        }else{
            JOptionPane.showMessageDialog(null, "Selecione una Categoria");
        }
        
    }//GEN-LAST:event_btnActualizarActionPerformed

    private void btnEliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEliminarActionPerformed
        if (!txtdescripcion.getText().isEmpty()){
            Categoria categoria = new Categoria();
            Ctr_Categoria controlcategoria = new Ctr_Categoria();
            
            categoria.setDescripcion(txtdescripcion.getText().trim());
            if(!controlcategoria.eliminar(idCategoria)){
                JOptionPane.showMessageDialog(null, "Categoria Eliminada");
                txtdescripcion.setText("");
                this.CargarTablaCategoria();
            }else{
                JOptionPane.showMessageDialog(null, "Error al Eliminar Categoria");
            }
            
        }else{
            JOptionPane.showMessageDialog(null, "Selecione una Categoria");
        }
    }//GEN-LAST:event_btnEliminarActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnActualizar;
    private javax.swing.JButton btnEliminar;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    public static javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel ldlwalpaper;
    public static javax.swing.JTable tlCategoria;
    private javax.swing.JTextField txtdescripcion;
    // End of variables declaration//GEN-END:variables

 /**
  * 
  * metodos para mostrar todas las categorias
  * 
  */
    private void CargarTablaCategoria (){
        Connection con = Conexion.conexcion.conectar();
        DefaultTableModel model = new DefaultTableModel();
        String sql = "select idCategoria, descripcion, estado from tb_categoria";
        Statement st;
        
        try {
            st = con.createStatement();
            ResultSet rs= st.executeQuery(sql);
            GestionarCategorias.tlCategoria = new JTable(model);
            GestionarCategorias.jScrollPane1.setViewportView(GestionarCategorias.tlCategoria);
            
            model.addColumn("idCatecoria");
            model.addColumn("Descripcion");
            model.addColumn("Estado");
            
            while (rs.next()) {                
                Object fila [] = new Object[3];
                
                for (int i = 0; i < 3; i++) {
                    fila [i] = rs.getObject(i + 1);
                }
                model.addRow(fila);
            }
            con.close();
        } catch (SQLException e) {
            System.out.println("Error al llenar ala tabla categoria" + e);
        }
        
        tlCategoria.addMouseListener(new MouseAdapter(){
            @Override
            public void mouseClicked(MouseEvent e){
                int fila_point = tlCategoria.rowAtPoint(e.getPoint());
                int columna_point = 0;
                
                if(fila_point > -1){
                    idCategoria = (int) model.getValueAt(fila_point, columna_point);
                    EnviarDatosCategoriaSeleccionada(idCategoria);
                }
                
                
            }
        });
         
    }
    
    private void EnviarDatosCategoriaSeleccionada (int idCategoria){
            try {
                
                        Connection con = Conexion.conexcion.conectar();
                        PreparedStatement pst = con.prepareStatement("select * from tb_categoria where idCategoria = '" + idCategoria + " ' ");
                        ResultSet rs = pst.executeQuery();
                        if (rs.next()){
                            txtdescripcion.setText(rs.getString("descripcion"));
                        }
                        con.close();
                
            } catch (SQLException e) {
            System.out.println("Error al seleccionar categoria" + e);
        }
    }
    
}
