package InternalFrame;

import Controlador.Crt_Producto_po;
import Controlador.Ctr_Categoria;
import Modelo.Categoria;
import Modelo.Producto;
import java.awt.Color;
import java.sql.PreparedStatement;
import java.awt.Dimension;
import java.awt.HeadlessException;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.sql.Connection;
import java.sql.Statement;
import java.sql.SQLException;
import java.sql.ResultSet;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JComboBox;

public class GestionarProducto extends javax.swing.JInternalFrame {

    private int idProducto;
    int obtenerIdCategoriaCombo = 0;

    public GestionarProducto() {
        initComponents();
        this.setSize(new Dimension(900, 500));
        this.CargarTablaProducto();
        this.CargarComboCategoria();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tbl_Producto = new javax.swing.JTable();
        btnActualizar = new javax.swing.JButton();
        btnEliminar = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        txt_nombre = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        txt_cantidad = new javax.swing.JTextField();
        txt_precio = new javax.swing.JTextField();
        txt_descripcio = new javax.swing.JTextField();
        CmbxIVA = new javax.swing.JComboBox<>();
        ComboCategoria = new javax.swing.JComboBox<>();
        ldlwalpaper = new javax.swing.JLabel();

        setClosable(true);
        setIconifiable(true);
        setResizable(true);
        setTitle("Gestionar Producto");
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setFont(new java.awt.Font("Arial Narrow", 1, 36)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Arministrar Productos");
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(340, 10, -1, -1));

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setOpaque(false);
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        tbl_Producto.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(tbl_Producto);

        jPanel1.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, 710, 250));

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 50, 730, 270));

        btnActualizar.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btnActualizar.setText("Actualizar");
        btnActualizar.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnActualizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnActualizarActionPerformed(evt);
            }
        });
        getContentPane().add(btnActualizar, new org.netbeans.lib.awtextra.AbsoluteConstraints(770, 110, 100, -1));

        btnEliminar.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btnEliminar.setText("Eliminar");
        btnEliminar.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnEliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEliminarActionPerformed(evt);
            }
        });
        getContentPane().add(btnEliminar, new org.netbeans.lib.awtextra.AbsoluteConstraints(770, 150, 100, -1));

        jLabel2.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(0, 0, 0));
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel2.setText("Cantidad:");
        getContentPane().add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 400, 70, -1));

        txt_nombre.setBackground(new java.awt.Color(255, 255, 255));
        txt_nombre.setFont(new java.awt.Font("Bahnschrift", 0, 14)); // NOI18N
        txt_nombre.setForeground(new java.awt.Color(0, 0, 0));
        txt_nombre.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        txt_nombre.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        getContentPane().add(txt_nombre, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 330, 150, 30));

        jLabel3.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(0, 0, 0));
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel3.setText("Categoria:");
        getContentPane().add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(560, 400, 90, -1));

        jLabel4.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(0, 0, 0));
        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel4.setText("Nombre:");
        getContentPane().add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 330, 70, -1));

        jLabel5.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(0, 0, 0));
        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel5.setText("Precio:");
        getContentPane().add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(290, 330, 80, -1));

        jLabel6.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(0, 0, 0));
        jLabel6.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel6.setText("Descricion:");
        getContentPane().add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(290, 400, 80, -1));

        jLabel7.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(0, 0, 0));
        jLabel7.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel7.setText("IGV:");
        getContentPane().add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(580, 330, 70, -1));

        txt_cantidad.setBackground(new java.awt.Color(255, 255, 255));
        txt_cantidad.setFont(new java.awt.Font("Bahnschrift", 0, 14)); // NOI18N
        txt_cantidad.setForeground(new java.awt.Color(0, 0, 0));
        txt_cantidad.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        txt_cantidad.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        getContentPane().add(txt_cantidad, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 400, 150, 30));

        txt_precio.setBackground(new java.awt.Color(255, 255, 255));
        txt_precio.setFont(new java.awt.Font("Bahnschrift", 0, 14)); // NOI18N
        txt_precio.setForeground(new java.awt.Color(0, 0, 0));
        txt_precio.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        txt_precio.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        getContentPane().add(txt_precio, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 330, 160, 30));

        txt_descripcio.setBackground(new java.awt.Color(255, 255, 255));
        txt_descripcio.setFont(new java.awt.Font("Bahnschrift", 0, 14)); // NOI18N
        txt_descripcio.setForeground(new java.awt.Color(0, 0, 0));
        txt_descripcio.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        txt_descripcio.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        getContentPane().add(txt_descripcio, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 400, 160, 30));

        CmbxIVA.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Seleccione IGV:", "No graba IGV", "18%", "16%" }));
        getContentPane().add(CmbxIVA, new org.netbeans.lib.awtextra.AbsoluteConstraints(660, 330, 170, -1));

        ComboCategoria.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Seleccione Categoria:" }));
        getContentPane().add(ComboCategoria, new org.netbeans.lib.awtextra.AbsoluteConstraints(660, 400, 170, -1));

        ldlwalpaper.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/fondo-azul-para-textura.jpg"))); // NOI18N
        getContentPane().add(ldlwalpaper, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 890, 470));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnActualizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnActualizarActionPerformed

        Producto producto = new Producto();
        Crt_Producto_po controlProducto = new Crt_Producto_po();
        String iva = "";
        String categoria = "";
        iva = CmbxIVA.getSelectedItem().toString().trim();
        categoria = ComboCategoria.getSelectedItem().toString().trim();
// Comprobamos que los campos de texto no estén vacíos
        if (txt_nombre.getText().isEmpty() || txt_cantidad.getText().isEmpty() || txt_precio.getText().isEmpty()) {
            JOptionPane.showMessageDialog(null, "Complete todos los campos");
        } else {
            if (iva.equalsIgnoreCase("Seleccione IGV:")) {
                JOptionPane.showMessageDialog(null, "Seleccione IGV:");
            } else {
                if (categoria.equalsIgnoreCase("Seleccione Categoria:")) {
                    JOptionPane.showMessageDialog(null, "Seleccione categoria");
                } else {

                    try {

                        producto.setNombre(txt_nombre.getText().trim());
                        producto.setCantidad(Integer.parseInt(txt_cantidad.getText().trim()));
                        String preciotxt = "";
                        double Precio = 0.0;
                        preciotxt = txt_precio.getText().trim();
                        boolean aux = false;

                        for (int i = 0; i < preciotxt.length(); i++) {

                            if (preciotxt.charAt(i) == ',') {
                                String precioNuevo = preciotxt.replace(",", ".");
                                Precio = Double.parseDouble(precioNuevo);
                                aux = true;
                            }

                        }

                        if (aux == true) {
                            producto.setPrecio(Precio);
                        } else {
                            Precio = Double.parseDouble(preciotxt);
                            producto.setPrecio(Precio);
                        }

                        producto.setDescripcion(txt_descripcio.getText().trim());

                        if (iva.equalsIgnoreCase("No graba IGV")) {
                            producto.setPorsentajeIVA(0);

                        } else if (iva.equalsIgnoreCase("18%")) {
                            producto.setPorsentajeIVA(18);
                        } else if (iva.equalsIgnoreCase("16%")) {
                            producto.setPorsentajeIVA(16);
                        }

                        this.IdCategoria();
                        producto.setIdCategoria(obtenerIdCategoriaCombo);
                        producto.setEstado(1);
                        if (controlProducto.actualizar(producto, idProducto)) {
                            JOptionPane.showMessageDialog(null, " Reguistro actualizado");
                            this.CargarComboCategoria();
                            this.CargarTablaProducto();
                            this.CmbxIVA.setSelectedItem("Seleccione IGV:");
                            this.Limpiar();

                        } else {
                            JOptionPane.showMessageDialog(null, "Error al actualizar [btn ac] ");
                        }

                    } catch (HeadlessException | NumberFormatException e) {
                        System.out.println("Error en: + " + e);
                    }

                }

            }

        }

    }//GEN-LAST:event_btnActualizarActionPerformed

    private void btnEliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEliminarActionPerformed
        Crt_Producto_po controlProducto = new Crt_Producto_po();
        if (idProducto == 0) {
            JOptionPane.showMessageDialog(null, "¡Seleccione un Producto!");
        } else {
            if (!controlProducto.eliminar(idProducto)) {
                JOptionPane.showMessageDialog(null, "¡ Producto elemminado !");
                this.CargarTablaProducto();
                this.CargarComboCategoria();
                this.Limpiar();
            }else{
            JOptionPane.showMessageDialog(null, "¡ Error al eliminar [btn] !");
            }
        }//
    }//GEN-LAST:event_btnEliminarActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> CmbxIVA;
    private javax.swing.JComboBox<String> ComboCategoria;
    private javax.swing.JButton btnActualizar;
    private javax.swing.JButton btnEliminar;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jPanel1;
    public static javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel ldlwalpaper;
    public static javax.swing.JTable tbl_Producto;
    private javax.swing.JTextField txt_cantidad;
    private javax.swing.JTextField txt_descripcio;
    private javax.swing.JTextField txt_nombre;
    private javax.swing.JTextField txt_precio;
    // End of variables declaration//GEN-END:variables
 /**
     * *********************************************
     * metodos para cargar las categorias en el jcombobox
     * *********************************************
     */

    private void CargarComboCategoria() {
        Connection con = Conexion.conexcion.conectar();
        String sql = "select * from tb_categoria";
        Statement st;
        try {
            st = con.createStatement();
            ResultSet rs = st.executeQuery(sql);
            ComboCategoria.removeAllItems();
            ComboCategoria.addItem("Seleccione Categoria:");

            while (rs.next()) {
                ComboCategoria.addItem(rs.getString("descripcion"));
            }
            con.close();
        } catch (SQLException e) {
            System.out.println("Error al llenar combo categoria" + e);
        }
    }

    /**
     *
     * metodos para mostrar todos los productos reguistrados
     *
     */
    String descripcioncategoria = "";
    double precio = 0.0;
    int porcentajeigv = 0;
    double IGV = 0;

    private void CargarTablaProducto() {
        Connection con = Conexion.conexcion.conectar();
        DefaultTableModel model = new DefaultTableModel();
        String sql = "select p.idProducto, p.nombre, p.cantidad, p.precio, p.descripcion, p.porcentajeIgv, c.descripcion, p.estado from tb_producto As p, tb_categoria As c where p.idCategoria = c.idCategoria; ";
        Statement st;

        try {
            st = con.createStatement();
            ResultSet rs = st.executeQuery(sql);
            GestionarProducto.tbl_Producto = new JTable(model);
            GestionarProducto.jScrollPane1.setViewportView(GestionarProducto.tbl_Producto);

            model.addColumn("Nº"); //id
            model.addColumn("Nombre");
            model.addColumn("Cantidad");
            model.addColumn("Precio");
            model.addColumn("Decripcion");
            model.addColumn("Igv");
            model.addColumn("Categoria");
            model.addColumn("Estado");

            while (rs.next()) {

                precio = rs.getDouble("precio");
                porcentajeigv = rs.getInt("porcentajeIgv");

                Object fila[] = new Object[8];
                for (int i = 0; i < 8; i++) {
                    if (i == 5) {
                        this.CalcularIgv(precio, porcentajeigv);
                        fila[i] = IGV;
                        rs.getObject(i + 1);
                    } else {
                        fila[i] = rs.getObject(i + 1);
                    }

                }
                model.addRow(fila);
            }
            con.close();
        } catch (SQLException e) {
            System.out.println("Error al llenar la tabla producto[ G ]" + e);
        }

        tbl_Producto.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent e) {
                int fila_point = tbl_Producto.rowAtPoint(e.getPoint());
                int columna_point = 0;

                if (fila_point > -1) {
                    idProducto = (int) model.getValueAt(fila_point, columna_point);
                    EnviarDatosProductosSeleccionada(idProducto); // este es el matodo
                }

            }
        });

    }

    /**
     *
     * metodos para calcular igv
     *
     */
    private double CalcularIgv(double precio, int igv) {
        int t_igv = igv;
        switch (t_igv) {
            case 0:
                IGV = 0.0;
                break;
            case 16:
                IGV = precio * 0.16;
                break;
            case 18:
                IGV = precio * 0.18;
                break;
            default:
                break;
        }
        //redondear decimales
        IGV = (double) Math.round(IGV * 100) / 100;
        return IGV;
    }

    /**
     *
     * metodos que envia datos seleccionados
     *
     */
    private void EnviarDatosProductosSeleccionada(int idProducto) {
        try {

            Connection con = Conexion.conexcion.conectar();
            PreparedStatement pst = con.prepareStatement("select * from tb_producto where idProducto = '" + idProducto + "'");
            ResultSet rs = pst.executeQuery();
            if (rs.next()) {
                txt_nombre.setText(rs.getString("nombre"));
                txt_cantidad.setText(rs.getString("cantidad"));
                txt_precio.setText(rs.getString("precio"));
                txt_descripcio.setText(rs.getString("descripcion"));
                int igv = rs.getInt("porcentajeIgv");
                switch (igv) {
                    case 0:
                        CmbxIVA.setSelectedItem("No grava IGV");
                        break;
                    case 18:
                        CmbxIVA.setSelectedItem("18%");
                        break;
                    case 16:
                        CmbxIVA.setSelectedItem("16%");
                        break;
                    default:
                        CmbxIVA.setSelectedItem("Seleccione IGV:");

                        break;
                }

                int idCate = rs.getInt("idCategoria");
                ComboCategoria.setSelectedItem(relacionarCategorias(idCate));
            }
            con.close();

        } catch (SQLException e) {
            System.out.println("Error al seleccionar producto ()" + e);
        }
    }

    /**
     *
     * metodos que relacionar categoria
     *
     */
    private String relacionarCategorias(int idCategoria) {
        String sql = "select descripcion from tb_categoria where idCategoria = '" + idCategoria + "'";
        Statement st;
        try {
            Connection con = Conexion.conexcion.conectar();
            st = con.createStatement();
            ResultSet rs = st.executeQuery(sql);
            while (rs.next()) {
                descripcioncategoria = rs.getString("descripcion");
            }
            con.close();
        } catch (SQLException e) {
            System.out.println("Error al obtener el id de la categoria [rg]" + e);
        }
        return descripcioncategoria;
    }

    private void Limpiar() {
        txt_nombre.setText("");
        txt_cantidad.setText("");
        txt_precio.setText("");
        txt_descripcio.setText("");
        CmbxIVA.setSelectedItem("Seleccione IGV:");
        ComboCategoria.setSelectedItem("Seleccione Categoria:");
        this.txt_nombre.requestFocus();
    }

    private int IdCategoria() {
        String sql = "select * from tb_categoria where descripcion = '" + this.ComboCategoria.getSelectedItem() + "'";
        Statement st;
        try {

            Connection cn = Conexion.conexcion.conectar();
            st = cn.createStatement();
            ResultSet rs = st.executeQuery(sql);
            while (rs.next()) {
                obtenerIdCategoriaCombo = rs.getInt("idCategoria");

            }

        } catch (SQLException e) {
            System.out.println("Error al optener id categoria 00 ");
        }
        return obtenerIdCategoriaCombo;
    }
}
